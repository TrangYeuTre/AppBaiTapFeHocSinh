import Card from "../UI/Card";
import ExerciseGroup from "./ExerciseGroup";
import { useAxiosInstance } from "../../hooks/useHooks";
import { useState } from "react";
import { submitAnswers } from "../../helper/axiosApi";
import { useSelector } from "react-redux";
import { useRouter } from "next/router";

export default function ExerciseManage({ username, hocSinh }) {
  const homeworks = useSelector((state) => state.hws.hws);
  const token = useSelector((state) => state.auth.token);
  const router = useRouter();

  console.log("---hws hi·ªán t·∫°i");
  console.log(homeworks);

  //State quy·∫øt ƒë·ªãnh c√≥ cho xem b√†i l√†m ƒë√£ l∆∞u c·ªßa h·ªçc sinh hay kh√¥ng
  //FIXME: ƒë·ªÉ true ƒë·ªÉ lu√¥n b·∫≠t ƒë·ªÉ build t√≠nh nƒÉng, xong th√¨ chuy·ªÉn n√≥ v·ªÅ false
  const [xemBaiDaLam, setXemBaiDaLam] = useState(true);

  //State qu·∫£n l√Ω th√¥ng b√°o l·ªói n·ªôi b·ªô lu√¥n
  const [error, setError] = useState({
    init: true,
    message: "",
  });
  console.log(error);
  //Quan tr·ªçng : th·∫±ng homeworks n√†y s·∫Ω d√πng l√†m khu√¥n ƒë·ªÉ fetch update n·ªôp b√†i t·∫≠p lu√¥n nh√©
  if (!homeworks || homeworks.length === 0)
    return (
      <Card plusStyle="w-1/2">
        <p>Ch∆∞a c√≥ b√†i t·∫≠p ƒë∆∞·ª£c giao üòéüòéüòé</p>
      </Card>
    );
  const axiosInstance = useAxiosInstance(token);

  //·ªû ƒë√¢y l√† b∆∞·ªõc trung gian ta ph·∫£i x·ª≠ l√Ω chuy·ªÉn h√≥a data homeworks v·ªÅ 1 m·∫£ng b√†i t·∫≠p
  // ti·ªán cho vi·ªác render.
  //M·ªói item trong homeworks c√≥ start,end -> ko c·∫ßn thi·∫øt v√¨ t·ª´ BE ta ƒë√£ x·ª≠ l√Ω l·∫•y v·ªÅ c√°c items c√≤n t·ªèng h·∫°n r·ªìi
  const handler = [];
  homeworks.forEach((item) => {
    item.baiTapVeNha.forEach((i) =>
      handler.push({ ...i, baiTapLonId: item._id, soLanNop: i.soLanNop })
    );
  });
  //N·ªôp b√†i chung ƒë√¢y
  const nopBaiHandler = async () => {
    //Ok quƒÉng nguy√™n m·∫£ng b√†i t·∫≠p n√†y l√™n ƒë·ªÉ BE x·ª≠ l√Ω update th√¥i
    const validSubmit = checkValidSubmit({ homeworks, setError });
    if (validSubmit) {
      await submitAnswers({ hws: homeworks, axiosInstance, hocSinh, router });
    }
  };
  return (
    <section className="content-wrapper">
      <p>H·ªçc sinh: {username}</p>
      <div className="flex flex-row flex-1 gap-3">
        <p>{xemBaiDaLam ? "·∫®n b√†i ƒë√£ l√†m" : "Xem l·∫°i b√†i ƒë√£ l√†m"}</p>
        <button
          type="button"
          className="btn btn-main w-fit mx-0"
          onClick={() => {
            setXemBaiDaLam((preState) => !preState);
          }}
        >
          {xemBaiDaLam ? "·∫®n" : "Xem "}
        </button>
      </div>
      <ul className="list-none flex flex-1 flex-col gap-10 mt-8 ">
        {handler.length > 0 &&
          handler.map((hw) => (
            <>
              <hr />
              <ExerciseGroup
                key={"Hello" + Math.random().toString()}
                hw={hw}
                xemBaiDaLam={xemBaiDaLam}
              />
            </>
          ))}
      </ul>
      <hr className="my-6" />
      {!error.init && error.message && (
        <div className="flex flex-col justify-center items-center gap bg-coRed opacity-80 p-4 gap-3 rounded-xl">
          <label className="text-coWhite font-bold">L·ªói ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è</label>
          <p className="text-coWhite ">{error.message}</p>
        </div>
      )}

      <button className="btn btn-submit my-6" onClick={nopBaiHandler}>
        <p className="uppercase font-bold">N·ªôp b√†i</p>
      </button>
    </section>
  );
}

function checkValidSubmit({ homeworks, setError }) {
  if (!homeworks || homeworks.length === 0) return false;
  //Th0: n·∫øu t·∫•t c·∫£ b√†i t·∫≠p ƒë·ªÅu h·∫øt l·∫ßn n·ªôp th√¨ dis
  let result = true;
  let validSubmit = false;
  // console.log(homeworks);
  for (let i = 0; i < homeworks.length; i++) {
    const curHw = homeworks[i];
    const curBaiTapVeNha = curHw.baiTapVeNha;
    for (let j = 0; j < curBaiTapVeNha.length; j++) {
      const curBtvn = curBaiTapVeNha[j];
      //H·ªÖ c√≤n 1 b√†i t·∫≠p c√≤n c√≥ th·ªÉ n·ªôp th√¨ v·∫´n cho n·ªôp
      //Nh·ªØng b√†i t·∫≠p c√≤n l·∫°i khi submit l√™n BE ƒë√£ c√≥ logic lo·∫°i ra r·ªìi
      if (+curBtvn.soLanNop < 3) validSubmit = true;
      //Th1: baiLamHocSinh r·ªóng
      if (curBtvn.baiLamCuaHocSinh.length === 0) {
        // console.log("Form kh√¥ng h·ª£p l·ªá -> baiLamCuaHocSinh r·ªóng");
        // result = false;
        setError({ message: "L√†m ch∆∞a ƒë·ªß b√†i t·∫≠p.", init: false });
        result = false;
        break;
      }
      //Th2: khi ph·∫ßn tr·∫£ l·ªùi b·ªã s·ª≠a l·∫°i ho·∫∑c b·ªã r·ªóng
      curBtvn.baiLamCuaHocSinh.forEach((bai) => {
        if (!bai.content) {
          // result = false;
          // console.log("Form kh√¥ng h·ª£p l·ªá -> m·ªôt content n√†o ƒë√≥ r·ªóng");
          setError({ message: "Thi·∫øu m·ªôt b√†i t·∫≠p ch∆∞a l√†m.", init: false });
          result = false;
        }
      });
      //Th3: ki·ªÉm cho t·ª´ng d·∫°ng b√†i
      if (curBtvn.data.viet.active) {
        const soLuongBaiHsLam = +curBtvn.baiLamCuaHocSinh.length;
        const soLuongBaiThuc = +curBtvn.data.viet.datas.length;
        if (soLuongBaiHsLam < soLuongBaiThuc) {
          setError({ message: "L√†m thi·∫øu b√†i d·∫°ng vi·∫øt.", init: false });
          result = false;
          break;
        }
        curBtvn.baiLamCuaHocSinh.forEach((baiLam) => {
          if (!baiLam.content) {
            setError({ message: "L√†m thi·∫øu b√†i d·∫°ng vi·∫øt.", init: false });
            result = false;
          }
        });
      }
      if (curBtvn.data.tracNghiem.active) {
        if (curBtvn.baiLamCuaHocSinh.length !== 1) {
          setError({ message: "L√†m thi·∫øu b√†i d·∫°ng tr·∫Øc nghi·ªám.", init: false });
          result = false;
        }
      }
      if (curBtvn.data.dienKhuyet.active) {
        const soLuongBaiHsLam = +curBtvn.baiLamCuaHocSinh.length;
        const soLuongBaiThuc = +curBtvn.data.dienKhuyet.datas.length;
        if (soLuongBaiHsLam < soLuongBaiThuc) {
          setError({ message: "L√†m thi·∫øu b√†i d·∫°ng ƒëi·ªÅn khuy·∫øt.", init: false });
          result = false;
          break;
        }
        curBtvn.baiLamCuaHocSinh.forEach((baiLam) => {
          if (!baiLam.content) {
            setError({
              message: "L√†m thi·∫øu b√†i d·∫°ng ƒëi·ªÅn khuy·∫øt.",
              init: false,
            });
            result = false;
          }
        });
      }
      if (curBtvn.data.matching.active) {
        const soLuongBaiHsLam = +curBtvn.baiLamCuaHocSinh.length;
        const soLuongBaiThuc = +curBtvn.data.matching.datas.itemsTrai.length;
        if (soLuongBaiHsLam < soLuongBaiThuc) {
          setError({ message: "L√†m thi·∫øu b√†i d·∫°ng matching.", init: false });
          result = false;
          break;
        }
      }
    }
  }
  if (!validSubmit) {
    setError({
      message: "T·∫•t c·∫£ c√°c b√†i t·∫≠p ƒë√£ h·∫øt l∆∞·ª£t l√†m b√†i.",
      init: false,
    });
    result = false;
  }
  //N·∫øu pass h·∫øt th√¨ true th√¥i
  if (result) {
    setError({ message: "", init: false });
  }
  return result;
}
